{"version":3,"sources":["Components/UserInfo/UserInfo.tsx","Components/TodoInfo/TodoInfo.tsx","Components/TodoList/TodoList.tsx","Components/AddTodo/AddTodo.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","props","user","name","email","className","TodoInfo","todo","title","completed","React","useState","checked","setChecked","type","onChange","TodoList","todos","map","id","AddTodo","state","userId","titleError","userError","resetForm","setState","handleChange","event","target","value","handleSelectChange","handleSubmit","preventDefault","trim","length","newTodo","users","find","addTodo","this","onSubmit","htmlFor","placeholder","Component","username","preparedTodos","person","App","addNewTodo","currentState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.37915575.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from '../../types';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = (props) => {\n  const { user } = props;\n  const { name, email } = user;\n\n  return (\n    <>\n      <div className=\"user__name\">\n        {name}\n      </div>\n      <div className=\"user__email\">\n        {email}\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types';\nimport { UserInfo } from '../UserInfo/UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = (props) => {\n  const { todo } = props;\n  const { user, title, completed } = todo;\n  const [checked, setChecked] = React.useState(completed);\n\n  return (\n    <>\n      {user && (\n        <UserInfo user={user} />\n      )}\n      <>\n        <div className=\"todo__title\">\n          {title}\n        </div>\n        <div className=\"todo__status\">\n          {checked ? 'Completed' : 'In Process'}\n        </div>\n        <input type=\"checkbox\" onChange={() => setChecked(!checked)} />\n      </>\n    </>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\nimport './TodoList.scss';\nimport { Todo } from '../../types';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const { todos } = props;\n\n  return (\n    <div className=\"list\">\n      {todos.map((todo: Todo) => (\n        <div\n          className=\"list__item\"\n          key={todo.id}\n        >\n          <TodoInfo todo={todo} />\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React from 'react';\nimport './AddTodo.scss';\n\nimport { User, Todo } from '../../types';\n\ninterface Props {\n  users: User[];\n  todos: Todo[];\n  addTodo: (todo: Todo) => void,\n}\n\ninterface State {\n  userId: number;\n  title: string;\n  titleError: string;\n  userError: string;\n}\n\nexport class AddTodo extends React.Component<Props, State> {\n  state: State = {\n    userId: 0,\n    title: '',\n    titleError: '',\n    userError: '',\n  };\n\n  resetForm = () => {\n    this.setState({\n      userId: 0,\n      title: '',\n      titleError: '',\n      userError: '',\n    });\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      title: event.target.value,\n      titleError: '',\n    });\n  };\n\n  handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({\n      userId: +event.target.value,\n      userError: '',\n    });\n  };\n\n  handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    const { userId, title } = this.state;\n\n    if (title.trim().length === 0) {\n      this.setState({ titleError: 'Please, enter valid title' });\n\n      return;\n    }\n\n    if (userId === 0) {\n      this.setState({ userError: 'Please, choose user' });\n\n      return;\n    }\n\n    const newTodo = {\n      userId,\n      id: this.props.todos.length + 1,\n      title,\n      user: this.props.users.find(user => user.id === this.state.userId),\n    };\n\n    this.props.addTodo(newTodo);\n    this.resetForm();\n  };\n\n  render() {\n    const { users } = this.props;\n    const {\n      userId,\n      title,\n      titleError,\n      userError,\n    } = this.state;\n\n    return (\n      <form\n        className=\"addTodo\"\n        onSubmit={this.handleSubmit}\n      >\n        <label htmlFor=\"title\">\n          <input\n            className=\"addTodo__title\"\n            type=\"text\"\n            name=\"title\"\n            id=\"title\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={this.handleChange}\n          />\n          {titleError && (\n            <span className=\"addTodo__Error\">\n              {titleError}\n            </span>\n          )}\n        </label>\n\n        <label htmlFor=\"username\">\n          <select\n            className=\"addTodo__username\"\n            name=\"username\"\n            id=\"username\"\n            value={userId}\n            onChange={this.handleSelectChange}\n          >\n            <option value=\"\">\n              Select a User\n            </option>\n            {users.map(user => (\n              <option value={user.id} key={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n          {userError && (\n            <span className=\"addTodo__Error\">\n              {userError}\n            </span>\n          )}\n        </label>\n        <button\n          type=\"submit\"\n          className=\"addTodo__button\"\n        >\n          Add\n        </button>\n      </form>\n    );\n  }\n}\n","const users = [\n  {\n    id: 1,\n    name: 'Roman Apostol',\n    username: 'Roman',\n    email: 'Roman@gmail.com',\n  },\n  {\n    id: 2,\n    name: 'Anna Apostol',\n    username: 'Anna',\n    email: 'Anna@gmail.com',\n  },\n  {\n    id: 3,\n    name: 'Max Lysak',\n    username: 'Max',\n    email: 'Max@gmail.com',\n  },\n  {\n    id: 4,\n    name: 'Aliona Ionova',\n    username: 'Aliona',\n    email: 'Aliona@gmail.com',\n  },\n  {\n    id: 5,\n    name: 'Yurii Holiuk',\n    username: 'Yurii',\n    email: 'Yurii@gmail.com',\n  },\n  {\n    id: 6,\n    name: 'Illia Vovchenko',\n    username: 'Illia',\n    email: 'Illia@gmail.com',\n  },\n  {\n    id: 7,\n    name: 'Ihor Nahnybida',\n    username: 'Ihor',\n    email: 'Ihor@gmail.com',\n  },\n  {\n    id: 8,\n    name: 'Alina Matuschak',\n    username: 'Alina',\n    email: 'Alina@gmail.com',\n  },\n  {\n    id: 9,\n    name: 'Pelahiia Khalishkhova',\n    username: 'Pelahiia',\n    email: 'Pelahiia@gmail.com',\n  },\n  {\n    id: 10,\n    name: 'Nadiia Martynets',\n    username: 'Nadiia',\n    email: 'Nadiia@gmail.com',\n  },\n];\n\nexport default users;\n","import React from 'react';\nimport './App.scss';\n\nimport { TodoList } from './Components/TodoList/TodoList';\nimport { AddTodo } from './Components/AddTodo/AddTodo';\nimport todos from './api/todos';\nimport users from './api/users';\nimport { Todo } from './types';\n\nconst preparedTodos = todos.map(todo => {\n  const user = users.find(person => person.id === todo.userId) || null;\n\n  return { ...todo, user };\n});\n\ninterface State {\n  todos: Todo[];\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    todos: [...preparedTodos],\n  };\n\n  addNewTodo = (todo: Todo) => {\n    this.setState(currentState => ({\n      todos: [...currentState.todos, todo],\n    }));\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"App__title\">Add todo form</h1>\n        <AddTodo\n          addTodo={this.addNewTodo}\n          users={users}\n          todos={this.state.todos}\n        />\n        <TodoList todos={this.state.todos} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/* eslint-disable max-len */\n\nconst todos = [\n  {\n    userId: 1,\n    id: 1,\n    title: 'delectus aut autem',\n    completed: false,\n  },\n  {\n    userId: 1,\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n  },\n];\n\nexport default todos;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}